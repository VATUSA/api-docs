openapi: 3.0.1
info:
  title: VATUSA API
  description: |-
    VATUSA APIv2 Documentation.
                Authentication methods are: <ul>
                <li> JSON Web Tokens (Translated from Laravel session)</li>
                <li> Session Cookies (Client-side credentials with ULS)</li>
                <li> API Keys (Issued to facilities)</li></ul>
                <p>Method security, if applicable, is indicated in brackets at the end of each endpoint title.</p>
                <p>Security classification: <ul>
                    <li><strong>Private:</strong> CORS Restricted (Internal)</li>
                    <li><strong>Auth:</strong> Accepts Session Cookie or JWT</li>
                    <li><strong>Key:</strong> Accepts API Key, Session Cookie, or JWT</li>
                </ul></p>
                <p>Facilities that have a APIv2 JWK defined in facility settings will have the data encapsulated in a
                signed package.  For more information, please see the IT section of the VATUSA forums.</p>
                <p>To prevent database changes in a development environment, you can either use your API sandbox key
                 or pass the <strong>?test</strong> query parameter with the call. Whether or not <strong>?test</strong> is present,
                 if both Sandbox JWK and Dev URL are configured, and the domains match, the response will be formatted according to JSON Web Signature, RFC 7515. </p>
  contact:
    name: VATUSA Web Team
    url: 'https://www.vatusa.net/info/members'
  version: 2.3.1
  x-logo:
    url: 'https://www.vatusa.net/img/logo-full.png'
servers:
  - url: 'https://api.vatusa.net/v2'
tags:
  - name: auth
  - name: computer based training
  - name: email
  - name: exam
  - name: facility
  - name: public
  - name: rating
  - name: role
  - name: solo
  - name: stats
  - name: support
  - name: survey
  - name: tmu
  - name: training
  - name: transfer
  - name: user
components:
  securitySchemes:
    jwt:
      type: http
      description: JSON Web Token translated from Laravel session
      scheme: bearer
    session:
      name: Cookie
      type: apiKey
      in: cookie
    apikey:
      type: apiKey
      description: API Key issued to facilities and generated on Facility Management page
      name: 'Authorization: APIKey'
      in: header
paths:
  /auth/token:
    get:
      summary: 'Get JWT [Private]'
      tags:
        - auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
              examples: {}
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: get-auth-token
      description: 'Get JWT, CORS restricted.'
      security:
        - jwt: []
        - session: []
  /auth/token/refresh:
    get:
      summary: 'Refresh JWT. [Private]'
      tags:
        - auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: get-auth-token-refresh
      description: Refresh JWT. CORS Restricted.
      security:
        - jwt: []
        - session: []
  /auth/info:
    get:
      summary: 'Get user info [Private]'
      tags:
        - auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./Models/User.yaml
              examples: {}
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: get-auth-info
      security:
        - jwt: []
        - session: []
      description: Get logged in user's information
  /cbt:
    get:
      summary: Get blocks filtered by facility
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  blocks:
                    type: array
                    items:
                      $ref: ./Models/TrainingBlock.yaml
      operationId: get-cbt
      description: 'Get CBT blocks, ordered by or filtered by facility'
      parameters:
        - schema:
            type: string
          in: query
          name: facility
      tags:
        - computer based training
    post:
      summary: 'Create new block [Auth]'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  testing:
                    type: boolean
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      operationId: post-cbt
      description: 'Create new CBT Training block. (requires role: ATM, DATM, TA, VATUSA Staff)'
      security:
        - jwt: []
        - session: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                facility:
                  type: string
                name:
                  type: string
                level:
                  type: string
                visible:
                  type: boolean
              required:
                - facility
                - name
      tags:
        - computer based training
  '/cbt/{blockId}':
    parameters:
      - schema:
          type: string
        name: blockId
        in: path
        required: true
    get:
      summary: Get chapters in block
      tags:
        - computer based training
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  blockId:
                    type: integer
                  blockName:
                    type: string
                  facility:
                    type: string
                  chapters:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        sortOrder:
                          type: integer
                        name:
                          type: string
                        active:
                          type: boolean
                        link:
                          type: string
        '404':
          description: Not Found
      operationId: get-cbt-id
      description: Get chapters for the block
    post:
      summary: Create new chapter
      tags:
        - computer based training
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./Models/Status.yaml
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: post-cbt-id
      description: Create a new chapter
      security:
        - jwt: []
        - session: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                facility:
                  type: string
                name:
                  type: string
                url:
                  type: string
    delete:
      summary: Delete block
      tags:
        - computer based training
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./Models/Status.yaml
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      operationId: delete-cbt-id
      description: Delete Block
      security:
        - jwt: []
        - session: []
  '/cbt/{blockId}/{chapterId}':
    parameters:
      - schema:
          type: string
        name: blockId
        in: path
        description: Block ID
        required: true
      - schema:
          type: string
        name: chapterId
        in: path
        required: true
        description: Chapter ID
    put:
      summary: Edit Chapter
      operationId: put-cbt-blockId-chapterId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./Models/Status.yaml
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      security:
        - jwt: []
        - session: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sortOrder:
                  type: integer
                name:
                  type: string
                active:
                  type: boolean
                url:
                  type: string
    delete:
      summary: Delete CBT Chapter
      operationId: delete-cbt-blockId-chapterId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./Models/Status.yaml
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      description: Delete CBT Chapter
